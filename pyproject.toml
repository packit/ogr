[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "ogr"
authors = [
    { name = "Red Hat", email = "user-cont-team@redhat.com" },
]
description = "One API for multiple git forges."
readme = "README.md"
license = "MIT"
license-files = { paths = ["LICENSE"] }
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development",
    "Topic :: Utilities",
]
dynamic = ["version"]
keywords = [
    "git",
    "api",
    "github",
    "gitlab",
    "pagure",
    "forgejo",
]
dependencies = [
    "cryptography",
    "Deprecated",
    "GitPython",
    "PyGithub",
    "python-gitlab",
    "PyYAML",
    "requests",
    "urllib3",
    "pyforgejo>=2.0.0",
    "httpx",  # for use within the Forgejo API wrapper
]

[project.urls]
Homepage = "https://github.com/packit/ogr"

[project.optional-dependencies]
testing = [
    "pytest",
    "pytest-cov",
    "flexmock",
]

[tool.hatch.version]
source = "vcs"
# we can't use pre-release-based version scheme because it generates versions
# that are sorted higher than the last stable release by RPM
# for example:
#   - pre-release (guess-next-dev):
#       0.20.1.dev1+g0abcdef.d20230921 > 0.20.1
#   - post-release (no-guess-dev):
#       0.20.0.post1.dev1+g0abcdef < 0.20.1
raw-options.version_scheme = "no-guess-dev"

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "COM", # flake8-commas
    "E",   # pycodestyle Error
    "F",   # Pyflakes
    "I",   # isort
    "PERF",# Perflint
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
    "UP",  # pyupgrade
    "W",   # pycodestyle Warning
]

ignore = [
    "RUF001",  # you »really« shall not touch my guillemets
    "RUF002",  # you shall not touch my guillemets
    "RUF003"   # Comment contains ambiguous character
]
